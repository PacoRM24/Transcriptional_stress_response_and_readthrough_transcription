#This code will generate a scatterplot with a DoG and a genome files containing the log2fc and p-value

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import matplotlib.patches as mpatches
from scipy.stats import pearsonr

# Load the files as DataFrames with pandas
dogs_df = pd.read_csv(dog_file, sep='\t') # change 'dog_file' with the actual path to the DoG expression file generated by ARTDeco
genome_df = pd.read_csv(genome_file, sep='\t') # change 'genome_file' with the actual path to the Genome expression file generated by ARTDeco

# Filter the DoGs data with p-value <= 0.05
filtered_dogs_df = dogs_df[dogs_df['padj'] <= 0.05]

# Filter the genome data with p-value <= 0.05
filtered_genes_df = genome_df[genome_df['padj'].notna() & (genome_df['padj'] <= 0.05)]

# Combine the data in a DataFrame using the 'Gene_ID' as a key
merged_df = pd.merge(filtered_genes_df, filtered_dogs_df, on='Gene_ID', suffixes=('_gene', '_dog'))
print(len(merged_df))

# Calculate the Pearson correlation coeficient and its p-value with scipy
correlation_coefficient, p_value = pearsonr(merged_df['log2FoldChange_gene'], merged_df['log2FoldChange_dog'])

# Calculate the categories "Upregulated", "Downregulated" and "No change"
merged_df['category'] = pd.cut(merged_df['log2FoldChange_gene'], bins=[-float('inf'), -1.2, 1.2, float('inf')], labels=["Downregulated", "No change", "Upregulated"])

# Create a dictionary that maps the category with a color
category_colors = {"Upregulated": "purple", "No change": "gray", "Downregulated": "blue"}

# Calculate percentage for each category
category_percentages = {category: (merged_df['category'] == category).mean() for category in category_colors.keys()}

# Create patches for categories
legend_patches = [mpatches.Patch(color=color, label=f"{category} ({category_percentages[category] * 100:.1f}%)") for category, color in category_colors.items()]

# Create the scatterplot with seaborn
plt.figure(figsize=(12, 6))
sns.scatterplot(data=merged_df, x='log2FoldChange_gene', y='log2FoldChange_dog', hue='category', palette=category_colors)

# Add labels for the axis and a title
plt.xlabel('Gene body log2 fold change')
plt.ylabel('DoG region log2 fold change')
plt.title('Gene expression vs DoG expression in pancreatic cancer cells with THZ1')

# Show the legend and number of genes plotted
plt.legend(handles=legend_patches, bbox_to_anchor=(0.242, 1))
plt.text(-0.5, -7.7, f'n = {len(merged_df)}')

# Show the Pearson correlation coeficient and p-value
plt.text(1.2, -7.7, f"r = {correlation_coefficient:.3}")
plt.text(3, -7.7, f"p-value = {p_value:.3e}")

# Put a grid on the plot
plt.grid(True)

# Adjust the plot size
plt.xlim(merged_df['log2FoldChange_gene'].min() - 0.5, merged_df['log2FoldChange_gene'].max() + 0.5)
plt.ylim(merged_df['log2FoldChange_dog'].min() - 0.5, merged_df['log2FoldChange_dog'].max() + 0.5)

# Show the plot
plt.show()
